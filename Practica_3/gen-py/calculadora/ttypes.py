#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Operator(object):
    ADD = 1
    SUBSTRACT = 2
    MULTIPLY = 3
    DIVIDE = 4
    ADDVECTOR = 5
    SUBSTRACTVECTOR = 6
    MULTIPLYVECTOR = 7
    POW = 8

    _VALUES_TO_NAMES = {
        1: "ADD",
        2: "SUBSTRACT",
        3: "MULTIPLY",
        4: "DIVIDE",
        5: "ADDVECTOR",
        6: "SUBSTRACTVECTOR",
        7: "MULTIPLYVECTOR",
        8: "POW",
    }

    _NAMES_TO_VALUES = {
        "ADD": 1,
        "SUBSTRACT": 2,
        "MULTIPLY": 3,
        "DIVIDE": 4,
        "ADDVECTOR": 5,
        "SUBSTRACTVECTOR": 6,
        "MULTIPLYVECTOR": 7,
        "POW": 8,
    }


class Terms(object):
    """
    Attributes:
     - operator1
     - operator2
     - operator3
     - operator4
     - op

    """


    def __init__(self, operator1=float(0), operator2=float(0), operator3=float(0), operator4=float(0), op=None,):
        self.operator1 = operator1
        self.operator2 = operator2
        self.operator3 = operator3
        self.operator4 = operator4
        self.op = op

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.operator1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.operator2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.operator3 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.operator4 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.op = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Terms')
        if self.operator1 is not None:
            oprot.writeFieldBegin('operator1', TType.DOUBLE, 1)
            oprot.writeDouble(self.operator1)
            oprot.writeFieldEnd()
        if self.operator2 is not None:
            oprot.writeFieldBegin('operator2', TType.DOUBLE, 2)
            oprot.writeDouble(self.operator2)
            oprot.writeFieldEnd()
        if self.operator3 is not None:
            oprot.writeFieldBegin('operator3', TType.DOUBLE, 3)
            oprot.writeDouble(self.operator3)
            oprot.writeFieldEnd()
        if self.operator4 is not None:
            oprot.writeFieldBegin('operator4', TType.DOUBLE, 4)
            oprot.writeDouble(self.operator4)
            oprot.writeFieldEnd()
        if self.op is not None:
            oprot.writeFieldBegin('op', TType.I32, 5)
            oprot.writeI32(self.op)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Solution(object):
    """
    Attributes:
     - firstValue
     - secondValue

    """


    def __init__(self, firstValue=float(0), secondValue=float(0),):
        self.firstValue = firstValue
        self.secondValue = secondValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.firstValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.secondValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Solution')
        if self.firstValue is not None:
            oprot.writeFieldBegin('firstValue', TType.DOUBLE, 1)
            oprot.writeDouble(self.firstValue)
            oprot.writeFieldEnd()
        if self.secondValue is not None:
            oprot.writeFieldBegin('secondValue', TType.DOUBLE, 2)
            oprot.writeDouble(self.secondValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InvalidOperation(TException):
    """
    Attributes:
     - Op
     - why

    """


    def __init__(self, Op=None, why=None,):
        self.Op = Op
        self.why = why

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.Op = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.why = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidOperation')
        if self.Op is not None:
            oprot.writeFieldBegin('Op', TType.I32, 1)
            oprot.writeI32(self.Op)
            oprot.writeFieldEnd()
        if self.why is not None:
            oprot.writeFieldBegin('why', TType.STRING, 2)
            oprot.writeString(self.why.encode('utf-8') if sys.version_info[0] == 2 else self.why)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Terms)
Terms.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'operator1', None, float(0), ),  # 1
    (2, TType.DOUBLE, 'operator2', None, float(0), ),  # 2
    (3, TType.DOUBLE, 'operator3', None, float(0), ),  # 3
    (4, TType.DOUBLE, 'operator4', None, float(0), ),  # 4
    (5, TType.I32, 'op', None, None, ),  # 5
)
all_structs.append(Solution)
Solution.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'firstValue', None, float(0), ),  # 1
    (2, TType.DOUBLE, 'secondValue', None, float(0), ),  # 2
)
all_structs.append(InvalidOperation)
InvalidOperation.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'Op', None, None, ),  # 1
    (2, TType.STRING, 'why', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
