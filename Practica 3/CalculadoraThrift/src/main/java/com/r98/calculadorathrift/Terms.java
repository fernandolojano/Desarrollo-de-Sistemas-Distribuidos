package com.r98.calculadorathrift;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-04-13")
public class Terms implements org.apache.thrift.TBase<Terms, Terms._Fields>, java.io.Serializable, Cloneable, Comparable<Terms> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Terms");

  private static final org.apache.thrift.protocol.TField OPERATOR1_FIELD_DESC = new org.apache.thrift.protocol.TField("operator1", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATOR2_FIELD_DESC = new org.apache.thrift.protocol.TField("operator2", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField OPERATOR3_FIELD_DESC = new org.apache.thrift.protocol.TField("operator3", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATOR4_FIELD_DESC = new org.apache.thrift.protocol.TField("operator4", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TermsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TermsTupleSchemeFactory();

  public double operator1; // required
  public double operator2; // required
  public double operator3; // required
  public double operator4; // required
  /**
   * 
   * @see Operator
   */
  public @org.apache.thrift.annotation.Nullable Operator op; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERATOR1((short)1, "operator1"),
    OPERATOR2((short)2, "operator2"),
    OPERATOR3((short)3, "operator3"),
    OPERATOR4((short)4, "operator4"),
    /**
     * 
     * @see Operator
     */
    OP((short)5, "op");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATOR1
          return OPERATOR1;
        case 2: // OPERATOR2
          return OPERATOR2;
        case 3: // OPERATOR3
          return OPERATOR3;
        case 4: // OPERATOR4
          return OPERATOR4;
        case 5: // OP
          return OP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATOR1_ISSET_ID = 0;
  private static final int __OPERATOR2_ISSET_ID = 1;
  private static final int __OPERATOR3_ISSET_ID = 2;
  private static final int __OPERATOR4_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATOR1, new org.apache.thrift.meta_data.FieldMetaData("operator1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPERATOR2, new org.apache.thrift.meta_data.FieldMetaData("operator2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPERATOR3, new org.apache.thrift.meta_data.FieldMetaData("operator3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPERATOR4, new org.apache.thrift.meta_data.FieldMetaData("operator4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Operator.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Terms.class, metaDataMap);
  }

  public Terms() {
    this.operator1 = 0d;

    this.operator2 = 0d;

    this.operator3 = 0d;

    this.operator4 = 0d;

  }

  public Terms(
    double operator1,
    double operator2,
    double operator3,
    double operator4,
    Operator op)
  {
    this();
    this.operator1 = operator1;
    setOperator1IsSet(true);
    this.operator2 = operator2;
    setOperator2IsSet(true);
    this.operator3 = operator3;
    setOperator3IsSet(true);
    this.operator4 = operator4;
    setOperator4IsSet(true);
    this.op = op;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Terms(Terms other) {
    __isset_bitfield = other.__isset_bitfield;
    this.operator1 = other.operator1;
    this.operator2 = other.operator2;
    this.operator3 = other.operator3;
    this.operator4 = other.operator4;
    if (other.isSetOp()) {
      this.op = other.op;
    }
  }

  public Terms deepCopy() {
    return new Terms(this);
  }

  @Override
  public void clear() {
    this.operator1 = 0d;

    this.operator2 = 0d;

    this.operator3 = 0d;

    this.operator4 = 0d;

    this.op = null;
  }

  public double getOperator1() {
    return this.operator1;
  }

  public Terms setOperator1(double operator1) {
    this.operator1 = operator1;
    setOperator1IsSet(true);
    return this;
  }

  public void unsetOperator1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPERATOR1_ISSET_ID);
  }

  /** Returns true if field operator1 is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPERATOR1_ISSET_ID);
  }

  public void setOperator1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPERATOR1_ISSET_ID, value);
  }

  public double getOperator2() {
    return this.operator2;
  }

  public Terms setOperator2(double operator2) {
    this.operator2 = operator2;
    setOperator2IsSet(true);
    return this;
  }

  public void unsetOperator2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPERATOR2_ISSET_ID);
  }

  /** Returns true if field operator2 is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPERATOR2_ISSET_ID);
  }

  public void setOperator2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPERATOR2_ISSET_ID, value);
  }

  public double getOperator3() {
    return this.operator3;
  }

  public Terms setOperator3(double operator3) {
    this.operator3 = operator3;
    setOperator3IsSet(true);
    return this;
  }

  public void unsetOperator3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPERATOR3_ISSET_ID);
  }

  /** Returns true if field operator3 is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPERATOR3_ISSET_ID);
  }

  public void setOperator3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPERATOR3_ISSET_ID, value);
  }

  public double getOperator4() {
    return this.operator4;
  }

  public Terms setOperator4(double operator4) {
    this.operator4 = operator4;
    setOperator4IsSet(true);
    return this;
  }

  public void unsetOperator4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPERATOR4_ISSET_ID);
  }

  /** Returns true if field operator4 is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPERATOR4_ISSET_ID);
  }

  public void setOperator4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPERATOR4_ISSET_ID, value);
  }

  /**
   * 
   * @see Operator
   */
  @org.apache.thrift.annotation.Nullable
  public Operator getOp() {
    return this.op;
  }

  /**
   * 
   * @see Operator
   */
  public Terms setOp(@org.apache.thrift.annotation.Nullable Operator op) {
    this.op = op;
    return this;
  }

  public void unsetOp() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case OPERATOR1:
      if (value == null) {
        unsetOperator1();
      } else {
        setOperator1((java.lang.Double)value);
      }
      break;

    case OPERATOR2:
      if (value == null) {
        unsetOperator2();
      } else {
        setOperator2((java.lang.Double)value);
      }
      break;

    case OPERATOR3:
      if (value == null) {
        unsetOperator3();
      } else {
        setOperator3((java.lang.Double)value);
      }
      break;

    case OPERATOR4:
      if (value == null) {
        unsetOperator4();
      } else {
        setOperator4((java.lang.Double)value);
      }
      break;

    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((Operator)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATOR1:
      return getOperator1();

    case OPERATOR2:
      return getOperator2();

    case OPERATOR3:
      return getOperator3();

    case OPERATOR4:
      return getOperator4();

    case OP:
      return getOp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OPERATOR1:
      return isSetOperator1();
    case OPERATOR2:
      return isSetOperator2();
    case OPERATOR3:
      return isSetOperator3();
    case OPERATOR4:
      return isSetOperator4();
    case OP:
      return isSetOp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Terms)
      return this.equals((Terms)that);
    return false;
  }

  public boolean equals(Terms that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_operator1 = true;
    boolean that_present_operator1 = true;
    if (this_present_operator1 || that_present_operator1) {
      if (!(this_present_operator1 && that_present_operator1))
        return false;
      if (this.operator1 != that.operator1)
        return false;
    }

    boolean this_present_operator2 = true;
    boolean that_present_operator2 = true;
    if (this_present_operator2 || that_present_operator2) {
      if (!(this_present_operator2 && that_present_operator2))
        return false;
      if (this.operator2 != that.operator2)
        return false;
    }

    boolean this_present_operator3 = true;
    boolean that_present_operator3 = true;
    if (this_present_operator3 || that_present_operator3) {
      if (!(this_present_operator3 && that_present_operator3))
        return false;
      if (this.operator3 != that.operator3)
        return false;
    }

    boolean this_present_operator4 = true;
    boolean that_present_operator4 = true;
    if (this_present_operator4 || that_present_operator4) {
      if (!(this_present_operator4 && that_present_operator4))
        return false;
      if (this.operator4 != that.operator4)
        return false;
    }

    boolean this_present_op = true && this.isSetOp();
    boolean that_present_op = true && that.isSetOp();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(operator1);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(operator2);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(operator3);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(operator4);

    hashCode = hashCode * 8191 + ((isSetOp()) ? 131071 : 524287);
    if (isSetOp())
      hashCode = hashCode * 8191 + op.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(Terms other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOperator1()).compareTo(other.isSetOperator1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator1, other.operator1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOperator2()).compareTo(other.isSetOperator2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator2, other.operator2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOperator3()).compareTo(other.isSetOperator3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator3, other.operator3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOperator4()).compareTo(other.isSetOperator4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator4, other.operator4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOp()).compareTo(other.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Terms(");
    boolean first = true;

    sb.append("operator1:");
    sb.append(this.operator1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator2:");
    sb.append(this.operator2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator3:");
    sb.append(this.operator3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator4:");
    sb.append(this.operator4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("op:");
    if (this.op == null) {
      sb.append("null");
    } else {
      sb.append(this.op);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TermsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TermsStandardScheme getScheme() {
      return new TermsStandardScheme();
    }
  }

  private static class TermsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Terms> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Terms struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATOR1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.operator1 = iprot.readDouble();
              struct.setOperator1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATOR2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.operator2 = iprot.readDouble();
              struct.setOperator2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPERATOR3
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.operator3 = iprot.readDouble();
              struct.setOperator3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPERATOR4
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.operator4 = iprot.readDouble();
              struct.setOperator4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.op = Operator.findByValue(iprot.readI32());
              struct.setOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Terms struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPERATOR1_FIELD_DESC);
      oprot.writeDouble(struct.operator1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPERATOR2_FIELD_DESC);
      oprot.writeDouble(struct.operator2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPERATOR3_FIELD_DESC);
      oprot.writeDouble(struct.operator3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPERATOR4_FIELD_DESC);
      oprot.writeDouble(struct.operator4);
      oprot.writeFieldEnd();
      if (struct.op != null) {
        oprot.writeFieldBegin(OP_FIELD_DESC);
        oprot.writeI32(struct.op.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TermsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TermsTupleScheme getScheme() {
      return new TermsTupleScheme();
    }
  }

  private static class TermsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Terms> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Terms struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOperator1()) {
        optionals.set(0);
      }
      if (struct.isSetOperator2()) {
        optionals.set(1);
      }
      if (struct.isSetOperator3()) {
        optionals.set(2);
      }
      if (struct.isSetOperator4()) {
        optionals.set(3);
      }
      if (struct.isSetOp()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOperator1()) {
        oprot.writeDouble(struct.operator1);
      }
      if (struct.isSetOperator2()) {
        oprot.writeDouble(struct.operator2);
      }
      if (struct.isSetOperator3()) {
        oprot.writeDouble(struct.operator3);
      }
      if (struct.isSetOperator4()) {
        oprot.writeDouble(struct.operator4);
      }
      if (struct.isSetOp()) {
        oprot.writeI32(struct.op.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Terms struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.operator1 = iprot.readDouble();
        struct.setOperator1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.operator2 = iprot.readDouble();
        struct.setOperator2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.operator3 = iprot.readDouble();
        struct.setOperator3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.operator4 = iprot.readDouble();
        struct.setOperator4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.op = Operator.findByValue(iprot.readI32());
        struct.setOpIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

